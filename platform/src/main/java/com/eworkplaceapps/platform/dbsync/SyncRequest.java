//===============================================================================
// Â© 2015 eWorkplace Apps.  ALL rights reserved.
// Main Author: Shrey Sharma
// Original DATE: 4/28/2015
//===============================================================================
package com.eworkplaceapps.platform.dbsync;

import com.eworkplaceapps.platform.exception.EwpException;
import com.eworkplaceapps.platform.utils.Utils;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * This is a data class for a sync request generated by a device and sent to
 * the device with which it wants data to be synced.
 * A SyncRequest collects SyncItem records since the last sync time with the
 * other device, groups them first in to SyncOp items, and then again in to
 * SyncTransaction items.
 */
public class SyncRequest {

    // A request identifier. For tracking the request.
    private String requestId = "";
    // My device id, sent to the remote for syncing
    private String myDeviceId = "";
    // My database version. It will be verified by the remote, and if the remote
    // device's database version does not match then syncing will not be performed.
    private String myDatabaseVersion = "";
    private String myApplicationVersion = "";
    // SyncItems collected between these times. The 'after' means greater than.
    private Date afterSyncTime = new Date();
    private Date toSyncTime = new Date();
    // The collected SyncTransaction record list in the order of timestamp
    private List<SyncTransaction> syncTransactionList = new ArrayList<SyncTransaction>();
    private boolean initCompleted = false;

    public String getRequestId() {
        return requestId;
    }

    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    public String getMyDeviceId() {
        return myDeviceId;
    }

    public void setMyDeviceId(String myDeviceId) {
        this.myDeviceId = myDeviceId;
    }

    public String getMyDatabaseVersion() {
        return myDatabaseVersion;
    }

    public void setMyDatabaseVersion(String myDatabaseVersion) {
        this.myDatabaseVersion = myDatabaseVersion;
    }

    public String getMyApplicationVersion() {
        return myApplicationVersion;
    }

    public void setMyApplicationVersion(String myApplicationVersion) {
        this.myApplicationVersion = myApplicationVersion;
    }

    public Date getAfterSyncTime() {
        return afterSyncTime;
    }

    public void setAfterSyncTime(Date afterSyncTime) {
        this.afterSyncTime = afterSyncTime;
    }

    public Date getToSyncTime() {
        return toSyncTime;
    }

    public void setToSyncTime(Date toSyncTime) {
        this.toSyncTime = toSyncTime;
    }

    public List<SyncTransaction> getSyncTransactionList() {
        return syncTransactionList;
    }

    public void setSyncTransactionList(List<SyncTransaction> syncTransactionList) {
        this.syncTransactionList = syncTransactionList;
    }

    public boolean isInitCompleted() {
        return initCompleted;
    }

    public void setInitCompleted(boolean initCompleted) {
        this.initCompleted = initCompleted;
    }

    /* XML:

    <RemoteSyncRequest>
       <RequestId></RequestId>
      <MyDeviceId></MyDeviceId>
      <MyDatabaseVersion></MyDatabaseVersion>
      <FromSyncTime></FromSyncTime>
      <ToSyncTime></ToSyncTime>

      <SyncTransactionList>
        ...
      </SyncTransactionList>

    </RemoteSyncRequest>
*/

    /**
     * generate sync request xml
     *
     * @param xmlSerializer
     * @param syncRequest
     * @throws IOException
     * @throws EwpException
     */
    public static void toXmlWriter(XmlSerializer xmlSerializer, SyncRequest syncRequest) throws IOException, EwpException {
        // Start Root tag
        xmlSerializer.startTag("", "RemoteSyncRequest");
        xmlSerializer.startTag("", "RequestId");
        xmlSerializer.text(syncRequest.getRequestId());
        xmlSerializer.endTag("", "RequestId");

        xmlSerializer.startTag("", "MyDeviceId");
        xmlSerializer.text(syncRequest.getMyDeviceId());
        xmlSerializer.endTag("", "MyDeviceId");

        xmlSerializer.startTag("", "MyDatabaseVersion");
        xmlSerializer.text(syncRequest.getMyDatabaseVersion());
        xmlSerializer.endTag("", "MyDatabaseVersion");

        xmlSerializer.startTag("", "MyApplicationVersion");
        xmlSerializer.text(syncRequest.getMyApplicationVersion());
        xmlSerializer.endTag("", "MyApplicationVersion");

        xmlSerializer.startTag("", "AfterSyncTime");
        String s = "2001-01-01T00:00:00.000";
        if (syncRequest.getAfterSyncTime() != null) {
            s = Utils.dateAsStringWithoutUTC(syncRequest.getAfterSyncTime());
        }
        xmlSerializer.text(s);
        xmlSerializer.endTag("", "AfterSyncTime");

        xmlSerializer.startTag("", "ToSyncTime");
        if (syncRequest.getToSyncTime() != null) {
            s = Utils.getUTCDateTimeAsString(syncRequest.getToSyncTime());
        } else {
            s = "2001-01-01T00:00:00.000";
        }
        xmlSerializer.text(s);
        xmlSerializer.endTag("", "ToSyncTime");

        SyncTransaction.listToXmlWriter(syncRequest.syncTransactionList, xmlSerializer);
        xmlSerializer.endTag("", "RemoteSyncRequest");
    }

    /**
     * parse sync request
     *
     * @param object
     * @return
     * @throws EwpException
     */

    public static SyncRequest parseXml(XmlPullParser object) throws EwpException {
        try {
            SyncRequest syncRequest = null;
            SyncTransaction syncTransaction = null;
            int event = object.getEventType();
            SyncOp syncOp = null;
            String text = null;
            while (event != XmlPullParser.END_DOCUMENT) {
                String name = object.getName();
                switch (event) {
                    case XmlPullParser.START_TAG:
                        if ("RemoteSyncRequest".equals(name)) {
                            syncRequest = new SyncRequest();
                        }
                        if ("SyncTransaction".equals(name)) {
                            syncTransaction = new SyncTransaction();
                            syncRequest.getSyncTransactionList().add(syncTransaction);
                        }
                        if ("SyncOp".equals(name)) {
                            syncOp = new SyncOp();
                            syncTransaction.getSyncOpList().add(syncOp);
                        }
                        break;
                    case XmlPullParser.TEXT:
                        text = object.getText();
                        break;
                    case XmlPullParser.END_TAG:
                        if ("RequestId".equals(name)) {
                            syncRequest.setRequestId(text);
                        } else if ("MyDeviceId".equals(name)) {
                            syncRequest.setMyDeviceId(text);
                        } else if ("MyDatabaseVersion".equals(name)) {
                            syncRequest.setMyDatabaseVersion(text);
                        } else if ("AfterSyncTime".equals(name)) {
                            syncRequest.setAfterSyncTime(Utils.dateFromString(text, true, true));
                        } else if ("SyncTransactionId".equals(name)) {
                            syncTransaction.setSyncTransactionId(text);
                            if (syncOp != null) {
                                syncOp.setSyncTransactionId(text);
                            }
                        } else if ("RowNumber".equals(name)) {
                            syncTransaction.setSyncRowNumber(Integer.parseInt(text));
                        } else if ("DeviceId".equals(name)) {
                            syncOp.setDeviceId(text);
                        } else if ("TableName".equals(name)) {
                            syncOp.setTableName(text);
                        } else if ("PKName".equals(name)) {
                            syncOp.setPkName(text);
                        } else if ("PKValue".equals(name)) {
                            syncOp.setPkValue(text);
                        } else if ("OpType".equals(name)) {
                            syncOp.setOpType(text);
                        } else if ("ColumnValue".equals(name)) {
                            syncOp.getColumnValues().put(object.getAttributeValue(null, "Name"), object.getAttributeValue(null, "Value"));
                        } else if ("SyncTransactionId".equals(name)) {
                            syncOp.setSyncTransactionId(text);
                        } else if ("CreatedTime".equals(name)) {
                            syncOp.setCreatedTime(Utils.dateFromString(text, true, true));
                        } else if ("ToSyncTime".equals(name)) {
                            syncRequest.setToSyncTime(Utils.dateFromString(text, true, true));
                        } else if ("InitCompleted".equals(name)) {
                            boolean val = "True".equals(text) || "true".equals(text);
                            syncRequest.setInitCompleted(val);
                        } else if ("MyApplicationVersion".equals(name)) {
                            syncRequest.setMyApplicationVersion(text);
                        }
                        break;
                    default:
                        break;
                }
                event = object.next();
            }
            return syncRequest;
        } catch (XmlPullParserException e) {
            EwpException ex = new EwpException(e);
            throw ex;
        } catch (IOException e) {
            EwpException ex = new EwpException(e);
            throw ex;
        }


    }


}
